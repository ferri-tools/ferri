Release,Feature Group,Feature Name,Description
Demo v1,Core Environment,Project Initialization (`ferri init`),Creates a self-contained `.ferri` directory in the user's project to store all state, logs, and configuration.
Demo v1,Core Environment,Secure Secrets Management (`ferri secrets`),Allows developers to set, update, and remove encrypted secrets (like API keys) on a per-project basis. Secrets are encrypted with a master password.
Demo v1,Context Management,Define Context (`ferri ctx add`),Allows a user to specify files and directories that constitute the project's "context." This list is stored within the `.ferri` environment.
Demo v1,Context Management,Remove Context (`ferri ctx rm`),Allows a user to remove files and directories from the project's context.
Demo v1,Core Workflow,Unified Command Runner (`ferri with`),Executes any given command in a temporary, secure environment. Injects stored secrets as environment variables.
Demo v1,Core Workflow,Context Injection (`--ctx` flag),A flag for `ferri with` that reads the defined context, concatenates the file contents, and stuffs them into the prompt for the target model.
Demo v1,Model Integration,Local Model Support (Ollama),The `ferri with` command should seamlessly pipe the context-aware prompt to a locally running Ollama model.
Demo v1,Model Integration,Remote Model Support (`--model` flag),A flag for `ferri with` that sends the context-aware prompt to a specified remote API (e.g., gpt-4o), handling authentication with the stored secrets.
Future Vision,Job Management,Asynchronous Runner (`ferri run`),Runs any command as a long-running background job, returning an immediate Job ID for tracking.
Future Vision,Job Management,Job Dashboard (`ferri ps`),Provides an interactive dashboard to monitor the status, logs, and output of all background jobs.
Future Vision,Workflow Automation,Declarative Workflows (`ferri flow`),Allows developers to define a multi-step AI pipeline in a YAML file, chaining jobs together with dependencies.
Future Vision,UX/DX,Improved Logging & Error Handling,Provide more helpful and verbose logging options and user-friendly error messages for easier debugging.
Future Vision,Integrations,Third-Party Tool Integrations,Explore and implement integrations with other common developer tools (e.g., Git, IDEs) to further streamline workflows.

JiraTicketID,TicketID,Goal,SubtaskID,SubtaskDescription,Status
,T1,Workspace & CLI Scaffolding,T1.1,"Create Rust workspace with `ferri-core` (lib) and `ferri-cli` (bin).",Done
,T1,Workspace & CLI Scaffolding,T1.2,"Add `clap` with `derive` feature to `ferri-cli` dependencies.",Done
,T1,Workspace & CLI Scaffolding,T1.3,"Add `ferri-core` as a path dependency in `ferri-cli`'s Cargo.toml.",Done
,T1,Workspace & CLI Scaffolding,T1.4,"In `ferri-cli/src/main.rs`, define the top-level `Cli` struct and `Commands` enum for L1 features.",Done
,T1,Workspace & CLI Scaffolding,T1.5,"In `ferri-cli/src/main.rs`, implement the `main` function with a `match` statement for all L1 commands.",Done
,T1,Workspace & CLI Scaffolding,T1.6,"Ensure all `match` arms for unimplemented commands print a clear ""unimplemented"" message.",Done
,T2,`init` Command,T2.1,"In `ferri-core/src/lib.rs`, create a public function `initialize_project() -> std::io::Result<()>`.",Done
,T2,`init` Command,T2.2,"`initialize_project` logic: Create a `.ferri` directory in the current path.",Done
,T2,`init` Command,T2.3,"`initialize_project` logic: Ensure it does not fail if the directory already exists.",Done
,T2,`init` Command,T2.4,"`initialize_project` logic: Create an empty `.ferri/secrets.json` with initial structure (e.g., `{}`).",Done
,T2,`init` Command,T2.5,"`initialize_project` logic: Create an empty `.ferri/models.json` with initial structure (e.g., `[]`).",Done
,T2,`init` Command,T2.6,"`initialize_project` logic: Create an empty `.ferri/context.json` with initial structure (e.g., `[]`).",Done
,T2,`init` Command,T2.7,"In `ferri-core`, update unit tests to verify the creation of the `.ferri` directory and all default JSON files.",Done
,T2,`init` Command,T2.8,"In `ferri-cli`, call `ferri_core::initialize_project()` from the `init` command's `match` arm.",Done
,T2,`init` Command,T2.9,"In `ferri-cli`, add `assert_cmd` to `dev-dependencies` for integration testing.",Done
,T2,`init` Command,T2.10,"In `ferri-cli/tests/`, create an integration test that runs `ferri init` and asserts the creation of the directory and all default files.",Done
,T3,`secrets` Command,T3.1,"In `ferri-cli`, define the `secrets` subcommand with `set <KEY> <VALUE>` arguments.",To Do
,T3,`secrets` Command,T3.2,"In `ferri-core`, add `serde` and `serde_json` dependencies for serialization.",To Do
,T3,`secrets` Command,T3.3,"In `ferri-core`, add a dependency for encryption (e.g., `magic-crypt`).",To Do
,T3,`secrets` Command,T3.4,"In `ferri-core`, create a `secrets` module.",To Do
,T3,`secrets` Command,T3.5,"In `secrets` module, implement `set_secret(key: &str, value: &str)` function.",To Do
,T3,`secrets` Command,T3.6,"`set_secret` logic: Read `.ferri/secrets.json`, decrypt, insert/update value, encrypt, and write back.",To Do
,T3,`secrets` Command,T3.7,"In `ferri-core`, write unit tests for `set_secret` (new key and existing key).",To Do
,T3,`secrets` Command,T3.8,"In `ferri-cli`, call `ferri_core::secrets::set_secret` from the `secrets set` match arm.",To Do
,T3,`secrets` Command,T3.9,"In `ferri-cli/tests/`, write an integration test for `ferri secrets set`.",To Do
,T4,`models` Command,T4.1,"In `ferri-cli`, define `models` subcommand with `add`, `ls`, and `rm` subcommands.",To Do
,T4,`models` Command,T4.2,"In `ferri-cli`, define arguments for `models add` (alias, provider, name, etc.).",To Do
,T4,`models` Command,T4.3,"In `ferri-core`, create a `models` module.",To Do
,T4,`models` Command,T4.4,"In `models` module, define a `Model` struct that can be serialized.",To Do
,T4,`models` Command,T4.5,"In `models` module, implement `add_model(model: Model)` function.",To Do
,T4,`models` Command,T4.6,"In `models` module, implement `list_models()` function.",To Do
,T4,`models` Command,T4.7,"In `models` module, implement `remove_model(alias: &str)` function.",To Do
,T4,`models` Command,T4.8,"`list_models` logic: Implement auto-discovery of local Ollama models.",To Do
,T4,`models` Command,T4.9,"In `ferri-core`, write unit tests for `add`, `list`, and `remove` model functions.",To Do
,T4,`models` Command,T4.10,"In `ferri-cli`, call the corresponding `ferri_core::models` functions from the `models` match arms.",To Do
,T4,`models` Command,T4.11,"In `ferri-cli/tests/`, write integration tests for `models add`, `ls`, and `rm`.",To Do
,T5,`ctx` Command,T5.1,"In `ferri-cli`, define `ctx` subcommand with `add <PATHS...>` and `ls` subcommands.",To Do
,T5,`ctx` Command,T5.2,"In `ferri-core`, create a `context` module.",To Do
,T5,`ctx` Command,T5.3,"In `context` module, implement `add_to_context(paths: Vec<PathBuf>)` function.",To Do
,T5,`ctx` Command,T5.4,"`add_to_context` logic: Resolve file paths, verify existence, and add to `.ferri/context.json`.",To Do
,T5,`ctx` Command,T5.5,"In `context` module, implement `list_context()` function.",To Do
,T5,`ctx` Command,T5.6,"In `ferri-core`, write unit tests for adding valid, invalid, and duplicate paths to the context.",To Do
,T5,`ctx` Command,T5.7,"In `ferri-cli`, call the corresponding `ferri_core::context` functions from the `ctx` match arms.",To Do
,T5,`ctx` Command,T5.8,"In `ferri-cli/tests/`, write integration tests for `ctx add` and `ctx ls`.",To Do
,T6,`with` Command,T6.1,"In `ferri-cli`, define the `with` command to accept a command to execute (e.g., `ferri with -- echo 'hello'`).",To Do
,T6,`with` Command,T6.2,"In `ferri-core`, create an `execute` module with a `execute_with_context` function.",To Do
,T6,`with` Command,T6.3,"`execute_with_context` logic: Read secrets from `.ferri/secrets.json` and decrypt them.",To Do
,T6,`with` Command,T6.4,"`execute_with_context` logic: Set the decrypted secrets as environment variables for the child process.",To Do
,T6,`with` Command,T6.5,"`execute_with_context` logic: Read context from `.ferri/context.json` and prepare it for injection.",To Do
,T6,`with` Command,T6.6,"`execute_with_context` logic: Spawn and execute the given command using `std::process::Command`.",To Do
,T6,`with` Command,T6.7,"In `ferri-core`, write unit tests to verify secret injection and command execution setup.",To Do
,T6,`with` Command,T6.8,"In `ferri-cli`, call `ferri_core::execute::execute_with_context` from the `with` match arm.",To Do
,T6,`with` Command,T6.9,"In `ferri-cli/tests/`, write an integration test for `ferri with` that runs a test script and checks for env vars.",To Do
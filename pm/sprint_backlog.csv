wTicketID,Goal,SubtaskID,SubtaskDescription,Status
T1,Workspace Setup & CLI Scaffolding,T1.1,"Create a new Rust workspace with `cargo new ferri --lib` and `cargo new ferri-cli` inside.",Done
T1,Workspace Setup & CLI Scaffolding,T1.2,"In `ferri-cli/Cargo.toml`, add `clap` (with `derive`) and a path dependency on `ferri-core`.",Done
T1,Workspace Setup & CLI Scaffolding,T1.3,"In `ferri-cli/src/main.rs`, define the `Cli` and `Commands` structs/enums for all commands.",Done
T1,Workspace Setup & CLI Scaffolding,T1.4,"In `ferri-cli/src/main.rs`, implement the `main` function with a `match` statement.",Done
T1,Workspace Setup & CLI Scaffolding,T1.5,"For this ticket, all `match` arms should simply print an ""unimplemented"" message.",Done
T2,`init` Command Implementation & Testing,T2.1,"In `ferri-core/src/lib.rs`, create a public function `initialize_project() -> std::io::Result<()>`.",Done
T2,`init` Command Implementation & Testing,T2.2,"The function's logic should create a `.ferri` directory in the current path. It should not fail if the directory exists.",Done
T2,`init` Command Implementation & Testing,T2.3,"In `ferri-core/src/lib.rs`, add a `#[cfg(test)]` module and write a unit test for `initialize_project()`.",Done
T2,`init` Command Implementation & Testing,T2.4,"In `ferri-cli/src/main.rs`, call `ferri_core::initialize_project()` from the `init` command's `match` arm.",Done
T2,`init` Command Implementation & Testing,T2.5,"In `ferri-cli`, add `assert_cmd` to `dev-dependencies`.",Done
T2,`init` Command Implementation & Testing,T2.6,"In `ferri-cli/tests/`, create an integration test file `init.rs` that runs `cargo run -- init` and asserts success.",To Do
T3,`ctx` Command Core Logic & Testing,T3.1,"In `ferri-core/Cargo.toml`, add `serde` and `serde_json`.",To Do
T3,`ctx` Command Core Logic & Testing,T3.2,"In `ferri-core/src/lib.rs`, create a module `context`.",To Do
T3,`ctx` Command Core Logic & Testing,T3.3,"In `context.rs`, define public functions: `add_to_context` and `list_context`.",To Do
T3,`ctx` Command Core Logic & Testing,T3.4,"Implement the JSON read/write logic for the context functions inside `ferri-core`.",To Do
T3,`ctx` Command Core Logic & Testing,T3.5,"In `context.rs`, write unit tests for both functions to verify they correctly manipulate the `context.json` file.",To Do
T3,`ctx` Command Core Logic & Testing,T3.6,"In `ferri-cli/src/main.rs`, call the new `ferri_core::context` functions from the `ctx add` and `ctx list` match arms.",To Do
T3,`ctx` Command Core Logic & Testing,T3.7,"In `ferri-cli/tests/`, create an integration test file `ctx.rs` that verifies `ctx add` and `ctx list` work.",To Do
T4,`with` Command Implementation & Testing,T4.1,"In `ferri-core/src/lib.rs`, create a public function `execute_with_context(command: Vec<String>) -> std::io::Result<()>`.",To Do
T4,`with` Command Implementation & Testing,T4.2,"Implement logic to read context, prepend to prompt, and execute command via `std::process::Command`.",To Do
T4,`with` Command Implementation & Testing,T4.3,"In `ferri-cli/src/main.rs`, call `execute_with_context` from the `with` command's `match` arm.",To Do
T4,`with` Command Implementation & Testing,T4.4,"In `ferri-cli/tests/`, create an integration test `with.rs` to verify context injection.",To Do
T5,Improve `ferri-cli` Test Coverage,T5.1,"Create integration test for the `init` command.",To Do
T5,Improve `ferri-cli` Test Coverage,T5.2,"Create integration test for the `ctx add` command.",To Do
T5,Improve `ferri-cli` Test Coverage,T5.3,"Create integration test for the `ctx list` command.",To Do
T5,Improve `ferri-cli` Test Coverage,T5.4,"Create integration test for the `with` command.",To Do

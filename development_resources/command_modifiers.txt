### Layer 1: Core Execution Commands

These are the foundational "atomic units" of Ferri.

#### **`init`**
* **Default Behavior:** Creates the `.ferri` directory in the current working directory. Sets up the basic subdirectory structure (e.g., `.ferri/jobs`, `.ferri/logs`, `.ferri/secrets.enc`).
* **Modifiers:**
    * `--force`: Re-initializes an existing project, warning the user that this might clear existing state.

#### **`secrets`**
This command manages sensitive data and works with subcommands.
* **Default Behavior (`ferri secrets`):** Lists the names (keys) of all secrets stored for the project.
* **Subcommands & Modifiers:**
    * `set <KEY> [VALUE]`: Sets a secret. If `[VALUE]` is omitted, it will prompt the user to enter it securely.
        * `--from-file <FILE_PATH>`: Reads the value for the secret from the specified file.
        * `--from-env <ENV_VAR>`: Reads the value from an environment variable.
    * `rm <KEY>`: Removes the specified secret.
    * `ls`: An alias for the default behavior.

#### **`ctx`**
This command manages the files and outputs that form the project's context.
* **Default Behavior (`ferri ctx`):** Lists all file paths and virtual files currently in the context.
* **Subcommands & Modifiers:**
    * `add [PATHS...]`: Adds one or more files or directories to the context.
        * `--from-job <JOB_ID>`: Adds the standard output of a completed job to the context. Requires `--as`.
        * `--as <VIRTUAL_FILENAME>`: Assigns a name to the context entry being added, required when using `--from-job`.
    * `rm [PATHS...]`: Removes one or more files or directories from the context.
    * `ls`: An alias for the default behavior.

#### **`with`**
The synchronous "atomic" executor.
* **Default Behavior:** `ferri with -- <COMMAND>` executes the specified command after injecting all stored secrets as environment variables.
* **Modifiers:**
    * `--ctx`: Injects the project context into the standard input (`stdin`) of the executed command. This is the primary way to pass context to models.
    * `--model <MODEL_NAME>`: A convenience flag for directing prompts to a specific model (e.g., `gpt-4o`, `gemini-pro`). This could be a shorthand for a longer command.
    * `--no-secrets`: Executes the command without injecting any secrets.

---

### Layer 2: Workflow Automation Commands

These commands orchestrate the atomic units to perform more complex tasks.

#### **`run`**
* **Default Behavior:** `ferri run -- <COMMAND>` executes a `ferri with` command as a detached, asynchronous background job. It immediately returns a unique Job ID.
* **Modifiers:**
    * `--name <JOB_NAME>`: Assigns a human-readable alias to the job for easier reference.
    * All modifiers from `with` (`--ctx`, `--model`, etc.) can be passed through to configure the job's execution environment.

#### **`ps`**
* **Default Behavior:** Lists active and recently completed jobs in a simple table format (Job ID, Status, Name, Command).
* **Modifiers:**
    * `-a`, `--all`: Shows all jobs in the project's history, not just recent ones.
    * `-i`, `--interactive`: Launches the full-screen terminal UI dashboard for real-time monitoring.
    * `-l`, `--logs <JOB_ID>`: Tails the logs for a specific running or completed job.

#### **`yank`**
* **Default Behavior:** `ferri yank <JOB_ID>` prints the standard output (`stdout`) of a completed job to the console.
* **Modifiers:**
    * `--stderr`: Prints the standard error (`stderr`) stream of the job instead of stdout.
    * `-o`, `--output <FILE_PATH>`: Writes the job's output directly to a file, as an alternative to shell redirection.

#### **`flow`**
* **Default Behavior (`ferri flow`):** Validates the `ferri.yml` file in the current directory.
* **Subcommands & Modifiers:**
    * `run [FILE]`: Executes the workflow defined in the specified file (or `ferri.yml` if omitted).
        * `--from <JOB_ID>`: Starts the workflow execution from a specific job ID, skipping all its dependencies.
    * `show [FILE]`: Displays the execution plan and DAG of the workflow without running it.

---

### Layer 3: Agentic Engine

This is the intelligent director.

#### **`do`**
* **Default Behavior:** `ferri do "<GOAL>"` initiates the agentic process: it uses an SLM to generate a plan of action, presents it to the user for approval, and then executes it upon confirmation.
* **Modifiers:**
    * `-y`, `--yes`: Automatically approves and executes the initial plan generated by the agent. Use with caution.
    * `--model <MODEL_NAME>`: Specifies which model to use for the planning phase (e.g., `phi3`, `gemma:2b`).
    * `-i`, `--interactive`: Enables interactive debugging mode. If the agent encounters an error, it will pause and prompt for user input instead of attempting to self-correct.